{
  "author": {
    "name": "Mateusz Charytoniuk",
    "email": "m.charytoniuk@cksource.com"
  },
  "name": "event-dispatcher",
  "main": "libraries/modules/event-dispatcher",
  "version": "2.4.0",
  "autoload": {
    "amd": {
      "Bender/EventDispatcher": "libraries/scripts/Bender/EventDispatcher"
    }
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "configuration-processor": "~1",
    "data-container": "~1"
  },
  "devDependencies": {
    "grunt": "~0.4",
    "grunt-contrib-clean": "~0.5",
    "grunt-contrib-jshint": "~0.6",
    "grunt-contrib-watch": "~0.5",
    "grunt-istanbul": "~0.2",
    "grunt-jsbeautifier": "~0.2",
    "grunt-mocha-test": "~0.6",
    "istanbul": "~0.1",
    "mocha": "~1"
  },
  "engines": {
    "node": ">=0.10"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/benderjs/event-dispatcher"
  },
  "readme": "# Event Dispatcher\n\nAlongside standard event emitting mechanism, this library provides\nsome additional utilities like event aggregator and generic event dispatching\nrepository.\n\nThis is an **AMD** library. To use it with Node.js and other CommonJS modules\nbased environments I recommend\n[jsloader/jsloader](https://github.com/jsloader/jsloader).\n\nThis library is partially modeled after\n[symfony/EventDispatcher](http://github.com/symfony/EventDispatcher).\n\n## Examples\n\n### Basic usage\n\n#### Dispatching events\n\n```JavaScript\nrequire([\n    \"Bender/EventDispatcher/Event\",\n    \"Bender/EventDispatcher/EventDispatcher\"\n], function (Event, EventDispatcher) {\n    var eventDispatcher = new EventDispatcher();\n\n    eventDispatcher.getSupportedEvents = function () {\n        return [\"a\"];\n    };\n\n    eventDispatcher.addListener(\"a\", function (evt) {\n        console.log(\"hello %s!\", evt.data.place); // hello world\n    });\n\n    eventDispatcher.dispatch(\"a\", new Event({ place: \"world\" }));\n});\n```\n\n#### Aggregating event dispatchers\n\n```JavaScript\nvar auto = require(\"jsloader\"),\n    eventAggregator,\n    eventDispatcherA,\n    eventDispatcherB,\n    Event = auto.load(\"Bender/EventDispatcher/Event\"),\n    EventAggregator = auto.load(\"Bender/EventDispatcher/EventAggregator\"),\n    EventDispatcher = auto.load(\"Bender/EventDispatcher/EventDispatcher\");\n\neventAggregator = new EventAggregator();\n\neventDispatcherA.getSupportedEvents = function () {\n    return [\"a\"];\n};\n\neventDispatcherB.getSupportedEvents = function () {\n    return [\"b\"];\n};\n\neventAggregator.add(eventDispatcherA);\neventAggregator.add(eventDispatcherB);\n\neventAggregator.addListener(\"a\", function (evt) {\n    console.log(\"hello %s!\", evt.data.place); // hello world\n});\n\neventAggregator.addListener(\"b\", function (evt) {\n    console.log(\"hello %s!\", evt.data.place); // hello planet\n});\n\neventDispatcherA.dispatch(\"a\", new Event({ place: \"world\" }));\neventDispatcherB.dispatch(\"b\", new Event({ place: \"planet\" }));\n```\n\n### Advanced usage\n\n#### Exposing single module entry point using two combined modules\n\n```JavaScript\n// module/a.js\n\nvar eventAggregator,\n    eventDispatcherAB = require(\"foo\").eventDispatcherAB,\n    eventDispatcherC = require(\"bar\").eventDispatcherC;\n\neventAggregator = new EventAggregator();\n\neventAggregator.add(eventDispatcherAB);\neventAggregator.add(eventDispatcherC);\n\nmodule.exports = eventAggregator;\n```\n\n```JavaScript\n// module/b.js\n\nvar a = require(\"a\");\n\n// eventDispatcherAB is going to handle this\na.addListener(\"a\", function () {});\n\n// eventDispatcherAB is going to handle this\na.addListener(\"b\", function () {});\n\n// eventDispatcherC is going to handle this\na.addListener(\"c\", function () {});\n```\n\n#### Generic repository based on event dispatcher\n\n```JavaScript\ndefine([\"Bender/EventDispatcher/EventDispatcher/Repository\"], function (Repository) {\n    var repository = new Repository();\n\n    repository.addListener(Repository.EVENT_ITEM_ADDED, function (evt) {\n        var item = evt.data.item,\n            repository = evt.data.repository;\n\n        console.log(\"added: \" + item);\n\n        if ((\"world\" === item) && 2148 !== (new Date().getFullYear())) {\n            // this one should not be here for some reason\n            repository.remove(item);\n        }\n    });\n\n    repository.addListener(Repository.EVENT_ITEM_REMOVED, function (evt) {\n        console.log(\"removed: \" + evt.data.item);\n    });\n\n    repository.add(\"hello\"); // added: hello\n    repository.add(\"world\"); // added: world, removed: world\n});\n```\n\n## Semantic Versioning\n\nThis repository follows [Semantic Versioning](http://semver.org/) convention.\n",
  "readmeFilename": "README.md",
  "description": "Alongside standard event emitting mechanism, this library provides some additional utilities like event aggregator and generic event dispatching repository.",
  "bugs": {
    "url": "https://github.com/benderjs/event-dispatcher/issues"
  },
  "homepage": "https://github.com/benderjs/event-dispatcher",
  "_id": "event-dispatcher@2.4.0",
  "dist": {
    "shasum": "ee1d4b45f1f3e719e5952d2fe23f624ab04d99ff"
  },
  "_from": "event-dispatcher@~2",
  "_resolved": "https://registry.npmjs.org/event-dispatcher/-/event-dispatcher-2.4.0.tgz"
}
